<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.he.dao.DormitoryMapper">

	<resultMap id="BaseResultMap" type="com.he.po.Dormitory">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="dong" property="dong" jdbcType="VARCHAR" />
		<result column="floor" property="floor" jdbcType="INTEGER" />
		<result column="room" property="room" jdbcType="INTEGER" />
		<result column="sex" property="sex" jdbcType="VARCHAR" />
		<result column="number" property="number" jdbcType="INTEGER" />
		<result column="rent" property="rent" jdbcType="VARCHAR" />
		<result column="hasnumber" property="hasnumber" jdbcType="INTEGER" />
	</resultMap>

	<sql id="Base_Column_List">
		id, dong, floor, room, sex, number, rent,hasnumber
	</sql>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from dormitory
		where id = #{id,jdbcType=INTEGER}
	</select>

	<delete id="deleteByPrimaryKey"
		parameterType="java.lang.Integer">
		delete from dormitory
		where id = #{id,jdbcType=INTEGER}
	</delete>

	<insert id="insert" parameterType="com.he.po.Dormitory">
		insert into dormitory (id, dong, floor,
		room, sex, number,
		rent,hasnumber)
		values (#{id,jdbcType=INTEGER}, #{dong,jdbcType=VARCHAR},
		#{floor,jdbcType=INTEGER},
		#{room,jdbcType=INTEGER}, #{sex,jdbcType=VARCHAR}, #{number,jdbcType=INTEGER},
		#{rent,jdbcType=VARCHAR},#{hasnumber,jdbcType=INTEGER})
	</insert>

	<insert id="insertSelective" parameterType="com.he.po.Dormitory">
		insert into dormitory
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="dong != null">
				dong,
			</if>
			<if test="floor != null">
				floor,
			</if>
			<if test="room != null">
				room,
			</if>
			<if test="sex != null">
				sex,
			</if>
			<if test="number != null">
				number,
			</if>
			<if test="rent != null">
				rent,
			</if>
			<if test="hasnumber != null">
				hasnumber,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="dong != null">
				#{dong,jdbcType=VARCHAR},
			</if>
			<if test="floor != null">
				#{floor,jdbcType=INTEGER},
			</if>
			<if test="room != null">
				#{room,jdbcType=INTEGER},
			</if>
			<if test="sex != null">
				#{sex,jdbcType=VARCHAR},
			</if>
			<if test="number != null">
				#{number,jdbcType=INTEGER},
			</if>
			<if test="rent != null">
				#{rent,jdbcType=VARCHAR},
			</if>
			<if test="hasnumber != null">
				#{hasnumber,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>

	<update id="updateByPrimaryKeySelective"
		parameterType="com.he.po.Dormitory">
		update dormitory
		<set>
			<if test="dong != null">
				dong = #{dong,jdbcType=VARCHAR},
			</if>
			<if test="floor != null">
				floor = #{floor,jdbcType=INTEGER},
			</if>
			<if test="room != null">
				room = #{room,jdbcType=INTEGER},
			</if>
			<if test="sex != null">
				sex = #{sex,jdbcType=VARCHAR},
			</if>
			<if test="number != null">
				number = #{number,jdbcType=INTEGER},
			</if>
			<if test="rent != null">
				rent = #{rent,jdbcType=VARCHAR},
			</if>
			<if test="hasnumber != null">
				hasnumber = #{hasnumber,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>

	<update id="updateByPrimaryKey"
		parameterType="com.he.po.Dormitory">
		update dormitory
		set dong = #{dong,jdbcType=VARCHAR},
		floor = #{floor,jdbcType=INTEGER},
		room = #{room,jdbcType=INTEGER},
		sex = #{sex,jdbcType=VARCHAR},
		number = #{number,jdbcType=INTEGER},
		rent = #{rent,jdbcType=VARCHAR},
		hasnumber = #{hasnumber,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>
	
<!-- 	1.查询 携带参数查询 宿舍 用number属性传递选择查询满人或不满人 1满人：0不满人 -->
	<select id="fullDormitory" resultType="java.util.List" parameterType="com.he.po.Dormitory">
		select
		<include refid="Base_Column_List" />
		from dormitory
		<where>
			<if test="dong != null">
				and dong = #{dong,jdbcType=VARCHAR}
			</if>
			<if test="floor != null">
				and floor = #{floor,jdbcType=INTEGER}
			</if>
			<if test="room != null">
				and room = #{room,jdbcType=INTEGER}
			</if>
			<if test="sex != null">
				and sex = #{sex,jdbcType=VARCHAR}
			</if>
			<if test="rent != null">
				and rent = #{rent,jdbcType=VARCHAR}
			</if>
			<if test="number != null">
				and id IN 
			</if>	
			<if test="number == null">
				and id NOT IN 
			</if>
				(
				SELECT
				dormitory_id
				FROM
				dormitory_registration
				GROUP BY (dormitory_id)
				
				<if test="number == 1">
<!-- 					将 “=” 换成 “&gt;=” -->
				HAVING	COUNT(dormitory_id) &gt;= dormitory.number
				</if>
				<if test="number == 0">
				<!-- 					将 “<” 换成 “&lt; ” -->
				HAVING	COUNT(dormitory_id) &lt; dormitory.number
				</if>
				)			
		</where>
	</select>

<!--  //2.批量插入 -->
<!--     int insertListDormitory(List<Dormitory> ds); -->
    <insert id="insertListDormitory" parameterType="java.util.List">
		insert into dormitory 
		(dong, floor,
		room, sex, number,
		rent,hasnumber)
		values 
		<foreach collection="list" item="item" index="index"
		separator=",">
		(#{item.dong,jdbcType=VARCHAR},
		#{item.floor,jdbcType=INTEGER},
		#{item.room,jdbcType=INTEGER}, 
		#{item.sex,jdbcType=VARCHAR}, 
		#{item.number,jdbcType=INTEGER},
		#{item.rent,jdbcType=VARCHAR},
		#{item.hasnumber,jdbcType=INTEGER})
		</foreach>
	</insert>
    
    
    
<!--   //3.批量删除 -->
<!--     int deleteinsertListDormitory(List<Dormitory> ds); -->
    
    <delete id="deleteinsertListDormitory" parameterType="java.util.List" >
    delete from dormitory where id in
    <foreach collection="list" item="item" open="(" close=")" separator=",">
      #{item.id,jdbcType=INTEGER}
    </foreach>
    </delete>
    
    
<!--   //4.批量修改 -->
<!--     int updateListDormitory(List<Dormitory> ds); -->
		<update id="updateListDormitory"
		parameterType="java.util.List">
	<foreach collection="list" item="item" open="" close="" separator=";">
     	update 
     	dormitory
		<set>
			<if test="item.dong != null">
				dong = #{item.dong,jdbcType=VARCHAR},
			</if>
			<if test="item.floor != null">
				floor = #{item.floor,jdbcType=INTEGER},
			</if>
			<if test="item.room != null">
				room = #{item.room,jdbcType=INTEGER},
			</if>
			<if test="item.sex != null">
				sex = #{item.sex,jdbcType=VARCHAR},
			</if>
			<if test="item.number != null">
				number = #{item.number,jdbcType=INTEGER},
			</if>
			<if test="item.rent != null">
				rent = #{item.rent,jdbcType=VARCHAR},
			</if>
			<if test="item.hasnumber != null">
				hasnumber = #{item.hasnumber,jdbcType=INTEGER}
			</if>
		</set>
		where 
		id = #{item.id,jdbcType=INTEGER} 
    	</foreach>		
	</update>

<!-- 	//5.根据条件查询所有 -->
<!--     List<Dormitory> selectAllDormitory(Dormitory d); -->
	<select id="selectAllDormitory"  resultMap="BaseResultMap" parameterType="com.he.viewpo.DDMC">
		select dormitory.id, dormitory.dong, dormitory.floor, dormitory.room, dormitory.sex, dormitory.number, dormitory.rent, dormitory.hasnumber
		from dormitory 
		LEFT JOIN dormitory_allocation  on dormitory_allocation.dormitory_id = dormitory.id
		LEFT JOIN class  on dormitory_allocation.class_id=class.class_id  
		LEFT JOIN major  on class.major_id=major.major_id
		<where>
			<if test="dong != null and dong !=''">
				and dong = #{dong,jdbcType=VARCHAR}
			</if>
			<if test="floor != null and floor !=0">
				and floor = #{floor,jdbcType=INTEGER}
			</if>
			<if test="number != null and number !=0">
				and number = #{number,jdbcType=INTEGER}
			</if>
			<if test="sex != null and sex !=''">
				and sex = #{sex,jdbcType=VARCHAR}
			</if>
			<if test="majorId != null and majorId !=''">
				and major.major_id = #{majorId,jdbcType=VARCHAR}
			</if>
			<if test="classId != null and classId !=''">
				and class.class_id = #{classId,jdbcType=VARCHAR}
			</if>
			<if test="enough != null and enough !=''">
					<if test="enough == 0">
					and dormitory.id NOT IN 
					</if>
					<if test="enough == 1">
					and dormitory.id IN 
					</if>					
					(
							SELECT
							dormitory_id
							FROM
							dormitory_allocation
							GROUP BY (dormitory_id)
					)
			</if>
		</where>
		group by dormitory.dong,dormitory.floor,dormitory.room
	</select>
	
	
<!-- 	  //7.根据学号查询宿舍 -->
<!--     List<Dormitory> selectDormitoryByStudentId(String studentId); -->
	<select id="selectDormitoryByStudentId" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select dormitory.id, dormitory.dong, dormitory.floor,dormitory.room, dormitory.sex, dormitory.number,dormitory.rent, dormitory.hasnumber
		from dormitory ,dormitory_registration
		where dormitory.id=dormitory_registration.dormitory_id and   dormitory_registration.student_id = #{studentId,jdbcType=VARCHAR}
	</select>
	
<!-- 	//8.获取宿舍楼数 -->
<!--     List<String> getDormitoryDong(); -->
	<select id="getDormitoryDong" resultType="java.lang.String"
		parameterType="java.lang.String">
		select DISTINCT dormitory.dong
		from dormitory
		where dormitory.sex=#{sex,jdbcType=VARCHAR}
	</select>
	
<!-- 	 //9.获取宿舍楼层根据楼栋 -->
<!--     List<String> getDormitoryFloor(String dong); -->
	<select id="getDormitoryFloor" resultType="java.lang.String" 
		parameterType="java.lang.String" >
		select DISTINCT dormitory.floor
		from dormitory 
		where dormitory.dong=#{dong,jdbcType=VARCHAR}
	</select>
	
	
</mapper>